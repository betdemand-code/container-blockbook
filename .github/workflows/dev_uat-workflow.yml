name: Blockbook Deployment to Dev Cluster _CICD_

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:

  # Build & Public Container Image
  artifact:
    name: Build, Publish and Push Artifact/Docker Image 
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: "blockbook"
      AWS_ACCESS_KEY_ID:      ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:             ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY:         ${{ secrets.ECR_REPOSITORY }}
      SLACK_WEBHOOK_URL:      ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      - name: build application
        run:  |
            cd blockbooks/bitcoin/mainnet/
            docker build . -t bb-btc .
            echo "Container iamge list..."
            docker images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #### CONTAINER IMAGE SESSION
      # Configure AWS credentials
      - name: Configure AWS credentials                          
        uses: aws-actions/configure-aws-credentials@v1           
        with:                                                    
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}        
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      # Login to ECR registry
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Image Taging
      - name: Rename Docker Image with commit id
        env:
          REPO: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        run: |
            echo $REPO
            docker image tag $IMAGE_NAME $REPO:${GITHUB_RUN_ID}

      # Push Image to ECR
      - name: Push Container Image to ECR
        env:                                                                                                          
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}                                                       
          REPO: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        continue-on-error: true
        run: |
            echo "Pushing image to ECR..."
            docker images
            echo $REPO
            docker push $REPO:${GITHUB_RUN_ID}

      - name: Slack notification                                
        uses: rtCamp/action-slack-notify@master                 
        env:                                                    
          SLACK_CHANNEL: cicd-pipeline                   
          SLACK_MESSAGE: 'Newly updated Dev backend Container Image Push to ECR Successful!'
          SLACK_TITLE: 'Blockbook Container Image Push to ECR'                         
          SLACK_USERNAME: 'CICD Pipeline'                           
          SLACK_ICON: "https://a.slack-edge.com/80588/img/services/outgoing-webhook_512.png"
          SLACK_COLOR: '#228B22'                                
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}       
          MSG_MINIMAL: true

  # Public Docker Images
  ClusterDeploy:
    name: Cluster deployment  
    runs-on: ubuntu-latest
    needs: [artifact]
    env:
      AWS_ACCESS_KEY_ID:      ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:             ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY:         ${{ secrets.ECR_REPOSITORY }}
      SLACK_WEBHOOK_URL:      ${{ secrets.SLACK_WEBHOOK_URL }}
      KUBE_CONFIG_DATA:       ${{ secrets.KUBE_CONFIG_DATA_DEV_UAT }}

    steps:
      # Cancel previous runs
      - name: Cancel Previous Runs               
        uses: styfle/cancel-workflow-action@0.4.1
        with: 
          access_token: ${{ github.token }}
      # Checkout code Repo
      - name: Checkout Repo
        uses: actions/checkout@v1

        # Configure AWS credentials
      - name: Configure AWS credentials                          
        uses: aws-actions/configure-aws-credentials@v1           
        with:                                                    
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}        
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to ECR registry
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # Authenticator
      - uses: prepor/action-aws-iam-authenticator@master
      - run: aws-iam-authenticator version

      # Configure Kubectl
      - name: Install and configure kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.22.8/bin/linux/amd64/kubectl \
              --progress-bar \
              --location \
              --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          echo ${{ env.KUBE_CONFIG_DATA }} | base64 --decode > kubeconfig.yml
          kubectl version --client
      
      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
          kustomize version
      
      # Deploy the Docker image to the GKE clusters
      - name: Deploy
        timeout-minutes: 5
        env:                                                                                                          
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}                                                       
          REPO: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        run: |-
          export KUBECONFIG=kubeconfig.yml
          envsubst < kustomization.dev.yml > kustomization.yml
          kustomize edit set image REPO:TAG=$REPO:${GITHUB_RUN_ID}
          kustomize build . | kubectl apply -f -
          kubectl get services -o wide --namespace=dev
          kubectl get deployments -o wide --namespace=dev

      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,action,eventName,ref,workflow # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled
      